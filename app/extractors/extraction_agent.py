# app/extractors/extraction_agent.py
import os
import json
import logging
import re
from typing import Dict, Any, List, Optional, Tuple
import google.generativeai as genai
from PIL import Image

from app.config import GEMINI_API_KEY, GEMINI_MODEL
from app.utils.file_utils import optimize_image
from app.data.reference_data import CATEGORIES
from app.utils.size_detection import SizeDetectionAgent

logger = logging.getLogger(__name__)

class ExtractionAgent:
    def __init__(self, api_key: str = GEMINI_API_KEY):

        self.api_key = api_key
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel(GEMINI_MODEL)
        self.size_detector = SizeDetectionAgent()

    async def process_page(
        self, 
        image_path: str, 
        context: str,
        page_number: int,
        total_pages: int,
        previous_result: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:

        is_first_page = (page_number == 1)
        
        try:
            # Otimizar imagem para melhor processamento
            optimized_path = optimize_image(image_path, os.path.dirname(image_path))
            
            # Carregar a imagem
            image = Image.open(optimized_path)
            
            # Preparar o prompt JSON para o exemplo de resposta esperada
            json_template = self._get_json_template()
            
            # Preparar prompt adequado para a p√°gina
            if is_first_page:
                prompt = self._create_first_page_prompt(
                    context, page_number, total_pages, json_template
                )
            else:
                # Para p√°ginas adicionais, informar sobre produtos j√° encontrados
                previous_products_count = len(previous_result.get("products", [])) if previous_result else 0
                prompt = self._create_additional_page_prompt(
                    context, page_number, total_pages, previous_products_count, json_template
                )
            
            response = self.model.generate_content([prompt, image])
            response_text = response.text
            
            # Extrair e processar o JSON da resposta
            try:
                result = self._extract_and_clean_json(response_text, page_number)
                
                # Registrar resultados b√°sicos
                products_count = len(result.get("products", []))
                logger.info(f"P√°gina {page_number}: Extra√≠dos {products_count} produtos")
                
                for i, product in enumerate(result.get("products", [])[:3]):  # Log apenas primeiros 3
                    colors_count = len(product.get("colors", []))
                    logger.debug(f"Produto {i+1}: {product.get('name', 'Sem nome')} - {colors_count} cores")
                
                return result
                
            except Exception as e:
                logger.error(f"Erro ao processar JSON da p√°gina {page_number}: {str(e)}")
                
                # Tentar recuperar o m√°ximo de informa√ß√£o poss√≠vel
                fallback_result = self._attempt_json_recovery(response_text, page_number)
                
                if fallback_result and "products" in fallback_result:
                    logger.info(f"Recupera√ß√£o parcial: {len(fallback_result['products'])} produtos")
                    return fallback_result
                
                # Se n√£o foi poss√≠vel recuperar, retornar erro
                return {"error": str(e), "products": [], "raw_text": response_text[:1000]}
                
        except Exception as e:
            logger.error(f"Erro ao processar p√°gina {page_number}: {str(e)}")
            return {"error": str(e), "products": []}
    
    async def extract_from_page(self, image_path: str, context: str, page_number: int, 
                               total_pages: int, previous_results: List[Dict]) -> Dict[str, Any]:
        """
        Vers√£o melhorada com prompt focado em tamanhos
        """
        
        # PROMPT MELHORADO - A chave para resolver tudo
        enhanced_context = self._add_size_focused_instructions(context)
        
        try:
            image = Image.open(image_path)
            response = self.model.generate_content([enhanced_context, image])
            
            # Parse da resposta
            result = self._parse_extraction_response(response.text)
            
            # USAR SEU SIZE_DETECTION_AGENT para validar/melhorar
            if result.get('products'):
                result['products'] = self._improve_sizes_with_your_agent(result['products'])
            
            return result
            
        except Exception as e:
            logger.error(f"Erro na extra√ß√£o: {e}")
            return {"error": str(e), "products": []}
    
    def _improve_sizes_with_your_agent(self, products: List[Dict]) -> List[Dict]:
        """
        Usa seu SizeDetectionAgent para melhorar os tamanhos extra√≠dos
        """
        improved_products = []
        
        for product in products:
            improved_product = product.copy()
            product_code = product.get('material_code', '')
            category = product.get('category', '')
            
            for color in improved_product.get('colors', []):
                original_sizes = color.get('sizes', [])
                
                if original_sizes:
                    # USAR SEU AGENT para validar
                    validated_sizes = self.size_detector.normalize_size_extraction(
                        original_sizes, 
                        category=category
                    )
                    
                    if validated_sizes and len(validated_sizes) > 0:
                        color['sizes'] = validated_sizes
                        logger.info(f"‚úÖ Tamanhos validados para {product_code}: {len(validated_sizes)} tamanhos")
                        
                        # Recalcular subtotal se necess√°rio
                        if 'unit_price' in color:
                            total_qty = sum(s['quantity'] for s in validated_sizes)
                            color['subtotal'] = color['unit_price'] * total_qty
                    
                    else:
                        # Se valida√ß√£o rejeitar tudo, manter originais mas avisar
                        logger.warning(f"‚ö†Ô∏è SizeDetectionAgent rejeitou tamanhos para {product_code}")
                        color['sizes'] = original_sizes
                
                else:
                    # Sem tamanhos originais - problema de extra√ß√£o
                    logger.warning(f"‚ùå Nenhum tamanho extra√≠do para {product_code}")
                    
                    # Fallback: criar tamanho b√°sico baseado na categoria
                    fallback_size = self._create_fallback_size(category)
                    color['sizes'] = [fallback_size]
            
            improved_products.append(improved_product)
        
        return improved_products
    
    def _create_fallback_size(self, category: str) -> Dict[str, Any]:

        category_upper = category.upper() if category else ''
        
        # Tamanhos padr√£o por categoria
        if category_upper in ['MALHAS', 'T-SHIRTS', 'POLOS']:
            return {"size": "M", "quantity": 1}
        elif category_upper in ['VESTIDOS', 'SAIAS', 'CASACOS', 'BLUSAS']:
            return {"size": "40", "quantity": 1}
        elif category_upper in ['CAL√áAS', 'JEANS']:
            return {"size": "30", "quantity": 1}
        else:
            return {"size": "M", "quantity": 1}
        
    def _add_size_focused_instructions(self, base_context: str) -> str:

        size_instructions = """

        üéØ INSTRU√á√ïES ULTRA-ESPEC√çFICAS PARA TAMANHOS:

        ## PASSO 1: AN√ÅLISE ESTRUTURAL DA TABELA
        1. Identifique a PRIMEIRA LINHA (cabe√ßalhos da tabela)
        2. Localize colunas que s√£o TAMANHOS:
        - Tamanhos por letra: XS, S, M, L, XL, XXL
        - Tamanhos num√©ricos: 38, 40, 42, 44, 46, 48
        - Qualquer n√∫mero de 2 d√≠gitos nas colunas
        3. Memorize a POSI√á√ÉO de cada coluna de tamanho

        ## PASSO 2: MAPEAMENTO PRODUTO-TAMANHO
        Para cada linha de produto:
        1. Identifique o C√ìDIGO do produto (primeira coluna)
        2. Identifique a COR do produto
        3. Para CADA coluna de tamanho:
        - Leia o VALOR na intersec√ß√£o linha-produto √ó coluna-tamanho
        - C√âLULA VAZIA ou "0" = N√ÉO incluir esse tamanho
        - N√öMERO > 0 = incluir com quantidade EXATA

        ## PASSO 3: REGRAS ABSOLUTAS

        ‚ùå **JAMAIS FA√áA:**
        - Assumir "UN" ou "UNICO" quando v√™ colunas de tamanhos
        - Colocar quantity: 1 para todos sem verificar valores reais
        - Misturar informa√ß√µes de produtos diferentes

        ‚úÖ **SEMPRE FA√áA:**
        - Mapear cada intersec√ß√£o individualmente
        - Incluir apenas tamanhos com quantidade > 0
        - Manter correspond√™ncia exata posi√ß√£o‚Üítamanho‚Üíquantidade

        ## EXEMPLO PR√ÅTICO:

        Se v√™ esta estrutura:
        ```
        Model        | Color  | XS | S | M | L | XL | Qty | Price
        CF5271MA96E  | M9799  | 1  | 1 | 1 |   |    | 3   | 71.00
        CF5245MS019  | 94028  |    | 1 | 1 | 1 |    | 3   | 67.00
        ```

        EXTRAIR como:
        ```json
        {
        "products": [
            {
            "material_code": "CF5271MA96E",
            "colors": [{
                "color_code": "M9799",
                "sizes": [
                {"size": "XS", "quantity": 1},
                {"size": "S", "quantity": 1},
                {"size": "M", "quantity": 1}
                ]
            }]
            },
            {
            "material_code": "CF5245MS019", 
            "colors": [{
                "color_code": "94028",
                "sizes": [
                {"size": "S", "quantity": 1},
                {"size": "M", "quantity": 1},
                {"size": "L", "quantity": 1}
                ]
            }]
            }
        ]
        }
        ```

        **CR√çTICO**: Se n√£o conseguir identificar colunas de tamanhos claramente, 
        prefira retornar tamanhos vazios a assumir "UN".

        Continue com a extra√ß√£o seguindo rigorosamente estas regras.
        """
        
        return base_context + size_instructions
    
    def _extract_headers_from_context(self, context: str) -> List[str]:
        headers_match = re.search(r'Cabe√ßalhos Detectados: (.+)', context)
        if headers_match:
            headers_text = headers_match.group(1)
            headers = re.findall(r'"([^"]+)"', headers_text)
            return headers
        return []

    def _get_material_code_instructions(self, headers: List[str]) -> str:
        headers_upper = [h.upper() for h in headers]
        
        if "MODEL" in headers_upper:
            return "- C√≥digo do material: EXTRAIR da coluna 'Model'"
        elif "REFERENCE" in headers_upper:
            return "- C√≥digo do material: EXTRAIR da coluna 'Reference'"
        elif "ARTICLE" in headers_upper:
            return "- C√≥digo do material: EXTRAIR da coluna 'Article'"
        elif "SKU" in headers_upper:
            return "- C√≥digo do material: EXTRAIR da coluna 'SKU'"
        elif "ITEM" in headers_upper:
            return "- C√≥digo do material: EXTRAIR da coluna 'Item'"
        else:
            return """- C√≥digo do material: IDENTIFICAR por padr√µes alfanum√©ricos √∫nicos no texto
            - Procurar por c√≥digos como: CF5015E0624, AB123456, 50469055, T3216
            - Geralmente pr√≥ximo ao nome do produto ou no in√≠cio da linha"""

    def _create_first_page_prompt(
        self, context: str, page_number: int, total_pages: int, json_template: str
    ) -> str:

        headers_detected = self._extract_headers_from_context(context)
        
        material_code_instructions = self._get_material_code_instructions(headers_detected)
    
        return f"""
        # INSTRU√á√ïES PARA EXTRA√á√ÉO DE PRODUTOS
        
        Voc√™ √© um especialista em extrair dados de produtos de documentos comerciais.
        Esta √© a p√°gina {page_number} de {total_pages}.
        
        {context}
        
        ## REGRAS CR√çTICAS PARA TAMANHOS:
    
        ### PROBLEMA 1: TAMANHOS INCORRETOS ("UN" em vez dos tamanhos reais)
        **SOLU√á√ÉO - ALGORITMO DE MAPEAMENTO POSICIONAL**:
        
        1. **IDENTIFICAR ESTRUTURA DE TAMANHOS** na tabela:
           - Procurar colunas com n√∫meros: 34,36,38,40,42,44,46,48 (roupas)
           - Procurar colunas com letras: XS,S,M,L,XL,XXL (t-shirts/malhas)
           - Procurar colunas com tamanhos de cal√ßas: 24,25,26,27,28,29,30,31,32
        
        2. **MAPEAR QUANTIDADES POR POSI√á√ÉO**:
           ```
           Exemplo visual:
           CABE√áALHOS:    | 38 | 40 | 42 | 44 | 46 | 48 |
           QUANTIDADES:   | 1  |    | 2  |    | 1  |    |
           ```
           ‚ûú INTERPRETAR: 38‚Üí1, 42‚Üí2, 46‚Üí1 (ignorar colunas vazias)
           
           **NUNCA usar tamanho "UN" para roupas!**
        
        3. **VALIDAR TAMANHOS POR CATEGORIA**:
           - VESTIDOS/BLUSAS/CASACOS: 34-48 ou XS-XL
           - CAL√áAS/JEANS: 24-32 ou W28-W36  
           - MALHAS/T-SHIRTS: XS-XXL
           - "UN" s√≥ para acess√≥rios especiais (cintos, carteiras)
        
        ### PROBLEMA 2: CORES EM FALTA (NULL em vez das cores vis√≠veis)
        **SOLU√á√ÉO - EXTRAIR SEMPRE C√ìDIGO E NOME**:
        
        1. **LOCALIZAR INFORMA√á√ÉO DE COR**:
           - Coluna "Color" ou "Cor"
           - Junto ao c√≥digo do produto
           - Em linha separada
        
        2. **EXTRAIR AMBOS C√ìDIGO E NOME**:
           - "X0707 Asparago" ‚Üí color_code="X0707", color_name="Asparago"
           - "22222 Nero" ‚Üí color_code="22222", color_name="Nero"
           - "94028 Blu marino" ‚Üí color_code="94028", color_name="Blu marino"
           - Se s√≥ h√° c√≥digo, investigar nome na linha/contexto
           - Se s√≥ h√° nome, investigar c√≥digo na linha/contexto
        
        3. **PADR√ïES DE C√ìDIGOS COMUNS**:
           - Alfanum√©ricos: X0707, M9990, C3831, V9414
           - Num√©ricos: 22222, 94028, 02056, 03243
           - **NUNCA deixar color_name como NULL se h√° informa√ß√£o vis√≠vel**
        
        ### PROBLEMA 3: AGRUPAMENTO INCORRETO
        **SOLU√á√ÉO - AGRUPAR VARIANTES POR COR**:
        
        Se vir c√≥digos como CF5271MA96E.1, CF5271MA96E.2:
        ‚ûú AGRUPAR em UM produto CF5271MA96E com m√∫ltiplas cores
        
        ##  ALGORITMO PASSO-A-PASSO:
        
        ### PASSO 1: IDENTIFICAR ESTRUTURA
        1. Localizar tabela principal de produtos
        2. Identificar colunas de tamanhos (n√∫meros ou letras)
        3. Identificar onde est√£o as cores (c√≥digo + nome)
        4. Identificar onde est√£o as quantidades
        
        ### PASSO 2: EXTRAIR CADA PRODUTO
        Para cada linha/bloco de produto:
        1. **C√≥digo**: CF5015E0624, CF5271MA96E, etc.
        2. **Nome**: Traduzir para portugu√™s se necess√°rio
        3. **Cores**: Extrair c√≥digo E nome da cor
        4. **Tamanhos**: Mapear posicionalmente com quantidades
        5. **Pre√ßos**: Extrair pre√ßos vis√≠veis
        
        ### PASSO 3: VALIDAR E AGRUPAR
        1. Verificar tamanhos realistas
        2. Verificar cores completas
        3. Agrupar produtos com mesmo c√≥digo base
        4. Incluir apenas tamanhos com quantidade > 0
        
        ## EXEMPLOS PR√ÅTICOS:
        
        ### Exemplo 1: Linha Simples
        ```
        CF5015E0624 | X0707 Asparago | 40 | 42 |    | 44 |
                    |                | 1  | 1  |    |    |
        ```
        ‚ûú RESULTADO: sizes: [{{"size":"40","quantity":1}}, {{"size":"42","quantity":1}}]
        
        ### Exemplo 2: M√∫ltiplas Cores
        ```
        CF5271MA96E | M9990 Bege  | XS:1 | S:1 | M:1 | L:3 |
        CF5271MA96E | 22222 Preto | XS:1 | S:1 | M:1 |     |
        ```
        ‚ûú AGRUPAR em UM produto com 2 cores

        ## PADR√ïES COMUNS DE C√ìDIGOS DE PRODUTOS:
            - Alfanum√©ricos: CF5015E0624, AB123456, T3216
            - Num√©ricos longos: 50469055, 23411201
            - H√≠bridos: MA82O, MS55N, T054A

        ## Tarefa de Extra√ß√£o
        Analise esta p√°gina e extraia todas as informa√ß√µes de produtos presentes, seguindo todas as orienta√ß√µes de layout e estrutura descritas acima.
        
        Para cada produto, extraia:
        - Nome do produto: Em portugu√™s, se poss√≠vel faz tradu√ß√£o
        - **C√≥digo do material**: Identificar por padr√µes acima OU campo espec√≠fico detectado        
        - Categoria do produto - DEVE ser traduzido para PORTUGU√äS, usando APENAS uma das seguintes categorias: {CATEGORIES}
        - Modelo
        - Composi√ß√£o (se dispon√≠vel) - Deve ser traduzido para Portugu√™s - Portugal
        - Para CADA COR do produto:
          * C√≥digo da cor
          * Nome da cor (se dispon√≠vel)
          * Tamanhos dispon√≠veis e suas quantidades
          * Pre√ßo unit√°rio
          * Pre√ßo de venda (se dispon√≠vel)
          * Subtotal para esta cor

        ## Regras Cr√≠ticas:
        1. Extraia APENAS o que est√° vis√≠vel nesta p√°gina espec√≠fica
        2. Inclua APENAS tamanhos com quantidades explicitamente indicadas
        3. N√ÉO inclua tamanhos com c√©lulas vazias ou quantidade zero
        4. Utilize NULL para campos n√£o encontrados, mas mantenha a estrutura JSON
        5. Preste aten√ß√£o especial a como as cores s√£o organizadas conforme as instru√ß√µes
        6. N√ÉO invente dados ou adicione produtos que n√£o est√£o claramente na imagem
        7. **NUNCA usar tamanho "UN"** para roupas (vestidos, blusas, cal√ßas, etc.)
        8. **SEMPRE extrair c√≥digo E nome** da cor se vis√≠vel
        9. **MAPEAR tamanhos por posi√ß√£o** nas colunas
        10. **S√ì incluir tamanhos com quantidade > 0**
        11. **AGRUPAR produtos** com mesmo c√≥digo base
        12. **TRADUZIR nomes** para portugu√™s

        ## Tarefa
        Analise a imagem seguindo RIGOROSAMENTE estas instru√ß√µes e extraia todos os produtos.

        ## Formato de Resposta
        Retorne os dados extra√≠dos em formato JSON estrito:
        
        {json_template}
        """
    
    def _create_additional_page_prompt(
        self, context: str, page_number: int, total_pages: int, previous_products_count: int, json_template: str
    ) -> str:

        headers_detected = self._extract_headers_from_context(context)
        
        material_code_instructions = self._get_material_code_instructions(headers_detected)
    
        return f"""
        # INSTRU√á√ïES PARA EXTRA√á√ÉO DE PRODUTOS
        
        Voc√™ √© um especialista em extrair dados de produtos de documentos comerciais.
        Esta √© a p√°gina {page_number} de {total_pages}.
        
        {context}
        
        ## REGRAS CR√çTICAS PARA TAMANHOS:
    
        ### PROBLEMA 1: TAMANHOS INCORRETOS ("UN" em vez dos tamanhos reais)
        **SOLU√á√ÉO - ALGORITMO DE MAPEAMENTO POSICIONAL**:
        
        1. **IDENTIFICAR ESTRUTURA DE TAMANHOS** na tabela:
           - Procurar colunas com n√∫meros: 34,36,38,40,42,44,46,48 (roupas)
           - Procurar colunas com letras: XS,S,M,L,XL,XXL (t-shirts/malhas)
           - Procurar colunas com tamanhos de cal√ßas: 24,25,26,27,28,29,30,31,32
        
        2. **MAPEAR QUANTIDADES POR POSI√á√ÉO**:
           ```
           Exemplo visual:
           CABE√áALHOS:    | 38 | 40 | 42 | 44 | 46 | 48 |
           QUANTIDADES:   | 1  |    | 2  |    | 1  |    |
           ```
           ‚ûú INTERPRETAR: 38‚Üí1, 42‚Üí2, 46‚Üí1 (ignorar colunas vazias)
           
           **NUNCA usar tamanho "UN" para roupas!**
        
        3. **VALIDAR TAMANHOS POR CATEGORIA**:
           - VESTIDOS/BLUSAS/CASACOS: 34-48 ou XS-XL
           - CAL√áAS/JEANS: 24-32 ou W28-W36  
           - MALHAS/T-SHIRTS: XS-XXL
           - "UN" s√≥ para acess√≥rios especiais (cintos, carteiras)
        
        ### PROBLEMA 2: CORES EM FALTA (NULL em vez das cores vis√≠veis)
        **SOLU√á√ÉO - EXTRAIR SEMPRE C√ìDIGO E NOME**:
        
        1. **LOCALIZAR INFORMA√á√ÉO DE COR**:
           - Coluna "Color" ou "Cor"
           - Junto ao c√≥digo do produto
           - Em linha separada
        
        2. **EXTRAIR AMBOS C√ìDIGO E NOME**:
           - "X0707 Asparago" ‚Üí color_code="X0707", color_name="Asparago"
           - "22222 Nero" ‚Üí color_code="22222", color_name="Nero"
           - "94028 Blu marino" ‚Üí color_code="94028", color_name="Blu marino"
           - Se s√≥ h√° c√≥digo, investigar nome na linha/contexto
           - Se s√≥ h√° nome, investigar c√≥digo na linha/contexto
        
        3. **PADR√ïES DE C√ìDIGOS COMUNS**:
           - Alfanum√©ricos: X0707, M9990, C3831, V9414
           - Num√©ricos: 22222, 94028, 02056, 03243
           - **NUNCA deixar color_name como NULL se h√° informa√ß√£o vis√≠vel**
        
        ### PROBLEMA 3: AGRUPAMENTO INCORRETO
        **SOLU√á√ÉO - AGRUPAR VARIANTES POR COR**:
        
        Se vir c√≥digos como CF5271MA96E.1, CF5271MA96E.2:
        ‚ûú AGRUPAR em UM produto CF5271MA96E com m√∫ltiplas cores
        
        ##  ALGORITMO PASSO-A-PASSO:
        
        ### PASSO 1: IDENTIFICAR ESTRUTURA
        1. Localizar tabela principal de produtos
        2. Identificar colunas de tamanhos (n√∫meros ou letras)
        3. Identificar onde est√£o as cores (c√≥digo + nome)
        4. Identificar onde est√£o as quantidades
        
        ### PASSO 2: EXTRAIR CADA PRODUTO
        Para cada linha/bloco de produto:
        1. **C√≥digo**: CF5015E0624, CF5271MA96E, etc.
        2. **Nome**: Traduzir para portugu√™s se necess√°rio
        3. **Cores**: Extrair c√≥digo E nome da cor
        4. **Tamanhos**: Mapear posicionalmente com quantidades
        5. **Pre√ßos**: Extrair pre√ßos vis√≠veis
        
        ### PASSO 3: VALIDAR E AGRUPAR
        1. Verificar tamanhos realistas
        2. Verificar cores completas
        3. Agrupar produtos com mesmo c√≥digo base
        4. Incluir apenas tamanhos com quantidade > 0
        
        ## EXEMPLOS PR√ÅTICOS:
        
        ### Exemplo 1: Linha Simples
        ```
        CF5015E0624 | X0707 Asparago | 40 | 42 |    | 44 |
                    |                | 1  | 1  |    |    |
        ```
        ‚ûú RESULTADO: sizes: [{{"size":"40","quantity":1}}, {{"size":"42","quantity":1}}]
        
        ### Exemplo 2: M√∫ltiplas Cores
        ```
        CF5271MA96E | M9990 Bege  | XS:1 | S:1 | M:1 | L:3 |
        CF5271MA96E | 22222 Preto | XS:1 | S:1 | M:1 |     |
        ```
        ‚ûú AGRUPAR em UM produto com 2 cores

        ## PADR√ïES COMUNS DE C√ìDIGOS DE PRODUTOS:
            - Alfanum√©ricos: CF5015E0624, AB123456, T3216
            - Num√©ricos longos: 50469055, 23411201
            - H√≠bridos: MA82O, MS55N, T054A

        ## Tarefa de Extra√ß√£o
        Analise esta p√°gina e extraia todas as informa√ß√µes de produtos presentes, seguindo todas as orienta√ß√µes de layout e estrutura descritas acima.
        
        Para cada produto, extraia:
        - Nome do produto: Em portugu√™s, se poss√≠vel faz tradu√ß√£o
        - **C√≥digo do material**: Identificar por padr√µes acima OU campo espec√≠fico detectado        
        - Categoria do produto - DEVE ser traduzido para PORTUGU√äS, usando APENAS uma das seguintes categorias: {CATEGORIES}
        - Modelo
        - Composi√ß√£o (se dispon√≠vel) - Deve ser traduzido para Portugu√™s - Portugal
        - Para CADA COR do produto:
          * C√≥digo da cor
          * Nome da cor (se dispon√≠vel)
          * Tamanhos dispon√≠veis e suas quantidades
          * Pre√ßo unit√°rio
          * Pre√ßo de venda (se dispon√≠vel)
          * Subtotal para esta cor

        ## Regras Cr√≠ticas:
        1. Extraia APENAS o que est√° vis√≠vel nesta p√°gina espec√≠fica
        2. Inclua APENAS tamanhos com quantidades explicitamente indicadas
        3. N√ÉO inclua tamanhos com c√©lulas vazias ou quantidade zero
        4. Utilize NULL para campos n√£o encontrados, mas mantenha a estrutura JSON
        5. Preste aten√ß√£o especial a como as cores s√£o organizadas conforme as instru√ß√µes
        6. N√ÉO invente dados ou adicione produtos que n√£o est√£o claramente na imagem
        7. **NUNCA usar tamanho "UN"** para roupas (vestidos, blusas, cal√ßas, etc.)
        8. **SEMPRE extrair c√≥digo E nome** da cor se vis√≠vel
        9. **MAPEAR tamanhos por posi√ß√£o** nas colunas
        10. **S√ì incluir tamanhos com quantidade > 0**
        11. **AGRUPAR produtos** com mesmo c√≥digo base
        12. **TRADUZIR nomes** para portugu√™s

        ## Formato de Resposta
        Retorne os dados extra√≠dos em formato JSON estrito:
        
        {json_template}
        """
    
    def _get_json_template(self) -> str:
        return '''
        {
          "products": [
            {
              "name": "Nome do produto",
              "material_code": "C√≥digo identificador √∫nico (OBRIGAT√ìRIO)",
              "category": "Categoria",
              "model": "Modelo",
              "composition": "100% algod√£o",
              "colors": [
                {
                  "color_code": "807",
                  "color_name": "Azul",
                  "sizes": [
                    {"size": "S", "quantity": 1},
                    {"size": "M", "quantity": 2}
                  ],
                  "unit_price": 79.00,
                  "sales_price": 119.00,
                  "subtotal": 474.00
                }
              ],
              "total_price": 474.00
            }
          ],
          "order_info": {
            "total_pieces": 122,
            "total_value": 9983.00
          }
        }
        '''
    
    def _extract_and_clean_json(self, response_text: str, page_number: int) -> Dict[str, Any]:

        # Verificar se tem bloco de c√≥digo JSON
        json_pattern = r'```(?:json)?\s*([\s\S]*?)\s*```'
        matches = re.findall(json_pattern, response_text)
        
        if matches:
            # Usar o primeiro bloco JSON encontrado
            json_str = matches[0]
            logger.info(f"JSON encontrado em bloco de c√≥digo para p√°gina {page_number}")
        else:
            # Tentar encontrar objeto JSON na string
            json_pattern = r'(\{[\s\S]*\})'
            matches = re.findall(json_pattern, response_text)
            
            if matches:
                # Buscar o JSON mais completo (maior)
                json_candidates = []
                for potential_json in matches:
                    try:
                        parsed = json.loads(potential_json)
                        if isinstance(parsed, dict) and "products" in parsed:
                            json_candidates.append((len(potential_json), potential_json))
                    except:
                        continue
                
                if json_candidates:
                    # Ordenar por tamanho e pegar o maior
                    json_candidates.sort(reverse=True)
                    json_str = json_candidates[0][1]
                    logger.info(f"JSON encontrado no texto para p√°gina {page_number}")
                else:
                    raise ValueError("Nenhum JSON v√°lido com estrutura de produtos encontrado")
            else:
                # Tentar interpretar a string inteira
                try:
                    json.loads(response_text)
                    json_str = response_text
                    logger.info(f"Resposta completa interpretada como JSON para p√°gina {page_number}")
                except:
                    raise ValueError("Nenhum JSON v√°lido encontrado na resposta")
        
        # Processar o JSON encontrado
        try:
            result = json.loads(json_str)
            
            # Validar e limpar a estrutura
            if not isinstance(result, dict):
                raise ValueError("O JSON n√£o √© um objeto como esperado")
            
            # Garantir que temos produtos
            if "products" not in result or not isinstance(result["products"], list):
                result["products"] = []
            
            # Garantir que temos order_info
            if "order_info" not in result or not isinstance(result["order_info"], dict):
                result["order_info"] = {}
            
            # Limpar os produtos
            clean_products = []
            for product in result["products"]:
                # Verificar se √© um produto v√°lido
                if not isinstance(product, dict):
                    continue
                
                # Garantir que campos cr√≠ticos existem
                for field in ["name", "material_code", "colors"]:
                    if field not in product:
                        product[field] = None if field != "colors" else []
                
                if product.get("name") is None:
                    product["name"] = ""
                if product.get("material_code") is None:
                    product["material_code"] = ""

                # Limpar as cores
                if isinstance(product["colors"], list):
                    clean_colors = []
                    for color in product["colors"]:
                        # Verificar se √© uma cor v√°lida
                        if not isinstance(color, dict):
                            continue
                        
                        # Garantir que campos cr√≠ticos existem
                        for field in ["color_code", "sizes"]:
                            if field not in color:
                                color[field] = None if field != "sizes" else []
                        
                        # SE√á√ÉO CORRIGIDA: Limpar os tamanhos
                        if isinstance(color["sizes"], list):
                            # Primeiro, extrair tamanhos como antes
                            preliminary_sizes = []
                            for size in color["sizes"]:
                                if isinstance(size, dict) and "size" in size and "quantity" in size:
                                    # Garantir que quantity √© um n√∫mero positivo
                                    try:
                                        quantity = float(size["quantity"])
                                        if quantity <= 0:
                                            continue
                                        size["quantity"] = int(quantity) if quantity.is_integer() else quantity
                                        preliminary_sizes.append(size)
                                    except (ValueError, TypeError):
                                        continue
                            
                            clean_sizes = self.size_detector.normalize_size_extraction(
                                preliminary_sizes, 
                                product.get("category", "")
                            )
                            
                            # Atualizar tamanhos limpos
                            color["sizes"] = clean_sizes
                            
                            # Ignorar cores sem tamanhos
                            if clean_sizes:
                                clean_colors.append(color)
                        else:
                            # Ignorar cores sem tamanhos v√°lidos
                            continue
                    
                    # Atualizar cores limpas
                    product["colors"] = clean_colors
                    
                    # Ignorar produtos sem cores
                    if clean_colors:
                        # Garantir que unit_price e subtotal s√£o n√∫meros
                        for color in product["colors"]:
                            for field in ["unit_price", "sales_price", "subtotal"]:
                                if field in color and color[field] is not None:
                                    try:
                                        color[field] = float(color[field])
                                    except (ValueError, TypeError):
                                        color[field] = None
                        
                        # Calcular total_price se n√£o existir
                        if "total_price" not in product or product["total_price"] is None:
                            subtotals = [color.get("subtotal", 0) for color in product["colors"] 
                                        if color.get("subtotal") is not None]
                            product["total_price"] = sum(subtotals) if subtotals else None
                        else:
                            # Garantir que √© um n√∫mero
                            try:
                                product["total_price"] = float(product["total_price"])
                            except (ValueError, TypeError):
                                product["total_price"] = None
                        
                        clean_products.append(product)
                    else:
                        # Ignorar produtos sem cores v√°lidas
                        continue
            
            # Atualizar produtos limpos
            result["products"] = clean_products
            
            # Limpar order_info
            for field in ["total_pieces", "total_value"]:
                if field in result["order_info"] and result["order_info"][field] is not None:
                    try:
                        value = result["order_info"][field]
                        result["order_info"][field] = int(value) if field == "total_pieces" else float(value)
                    except (ValueError, TypeError):
                        result["order_info"][field] = None
            
            logger.info(f"JSON processado com sucesso: {len(clean_products)} produtos v√°lidos")
            return result
            
        except Exception as e:
            logger.error(f"Erro ao processar JSON para p√°gina {page_number}: {str(e)}")
            raise ValueError(f"Erro ao processar JSON: {str(e)}")
    
    def _attempt_json_recovery(self, response_text: str, page_number: int) -> Optional[Dict[str, Any]]:
        """
        Tenta recuperar dados parciais de uma resposta inv√°lida
        
        Args:
            response_text: Texto de resposta da API
            page_number: N√∫mero da p√°gina
            
        Returns:
            Optional[Dict]: Dados parcialmente recuperados ou None
        """
        try:
            # Buscar qualquer estrutura que se pare√ßa com um produto
            product_pattern = r'{"name":[^{]*?,"colors":[^]]*?]}'
            product_matches = re.findall(product_pattern, response_text)
            
            products = []
            for product_text in product_matches:
                try:
                    # Tentar consertar o JSON do produto
                    fixed_text = product_text.replace("'", '"')
                    product = json.loads(f"{{{fixed_text}}}")
                    products.append(product)
                except:
                    continue
            
            if products:
                logger.info(f"Recuperados {len(products)} produtos parciais da p√°gina {page_number}")
                return {"products": products, "order_info": {}, "partially_recovered": True}
            
            return None
            
        except Exception as e:
            logger.warning(f"Falha na tentativa de recupera√ß√£o: {str(e)}")
            return None